; This configuration is used for compiling Latte projects

Compiler() configure {
    'classpath':[],          ; class path. classes in these URLs will be loaded for compiling
    'threads':{              ; threads for scanner, parser and code generator
                             ;   scanner threads         (default value is machine CPU core)
        'scanner': ${core},
                             ;   parser threads          (default value is machine CPU core)
        'parser':  ${core},
                             ;   code generator threads  (default value is machine CPU core)
        'codeGen': ${core}
    },
    'code':{                 ; some config about code
        'autoImport': [],    ;   append these imports to the end of import list in all files
        'indentation':4,     ;   indentation of the source code
        'lineBase':   0,     ;   all line info += lineBase
        'columnBase': 0      ;   all column info += columnBase
    },
    'out':{
        'debug': null,       ; output debug msg
        'info':System.out,   ; output info msg
        'warn':System.err,   ; output warn msg
        'err': System.err    ; output err msg
    },
    'fastFail':false,        ; the compiling process stops when any exception occurres
                             ; set this to `true` when Latte is used as a script
    'result':{               ; some info about compiling result
                             ;   output directory, or don't write to disk if it's not set (or is set to null)
        'outputDir':"${dir}${separator}target${separator}classes"
        'package':  null     ;   the jar file name, or null if don't wan't to pack jar. effective only when outputDir is not null
        'main':     null     ;   main class, or null if there's no main class. effective only when package is not null
        'with-lib': false    ;   include Latte runtime libraries. effective only when package is not null
    }
} compile filesInDirectory("${dir}", //.*\.lt//)
                             ; compile these files
                             ; use filesInDirectory('...', //.*\.lt//, true) to recursively
                             ; compile all `lt` files in children directories


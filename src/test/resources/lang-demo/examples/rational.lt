package lt::demo::examples

class Rational(n:int, d:int=1)
    if d is 0
        throw IllegalArgumentException("divider cannot be 0")

    neg= n * d < 0
    n=Math.`abs`(n)
    d=Math.`abs`(d)
    g=gcd(n,d)
    n/=g
    d/=g

    if neg
        n=-n

    toString():String = n + (
        if d==1
            < ""
        < "/" + d)

    equals(o):bool
        if o is type Rational
            <o.n==n and o.d==d
        else
            <false

    hashCode():int
        <n+d

    add(o:Rational):Rational = Rational(n*o.d+o.n*d, d*o.d)
    subtract(o:Rational):Rational = Rational(n*o.d-o.n*d, d*o.d)
    multiply(o:Rational):Rational = Rational(n*o.n, d*o.d)
    divide(o:Rational):Rational = Rational(n*o.d, d*o.n)

    static
        pri gcd(a:int, b:int)
            if b
                <gcd(b, a % b)
            else
                <a

class TestRational
    static
        testAdd(a:Rational, b:Rational)=a + b
        testSubtract(a:Rational, b:Rational)=a - b
        testMultiply(a:Rational, b:Rational)=a * b
        testDivide(a:Rational, b:Rational)=a / b
        testEquals(a:Rational, b:Rational)= a==b

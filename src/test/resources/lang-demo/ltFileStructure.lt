; the file is divided into two parts
; 1. pre processing
; 2. code
; the two parts can be mixed up

; the pre processing part contains "define" and "undef" command
; e.g.
define "CREATE TABLE" as "class"
; then, all "create table" would be replaced with "class"
; 'define' or 'undef' must be the first word of the line
; note that "define" is not a keyword of Latte, you can use this word freely in code part
define "VARCHAR" as ": String"
define "NUMBER" as ": int"
; there can be 0 or 1 or more defines in this part

; Note that define is a preprocessing command, it simply replaces [target] with [replacement]
; use as few defines as you can, and remember to use undef when the define is useless

; then there's code part
; code part starts with namespace declare
package lt::demo
; declares that the whole file is in namespace "lt::demo"
; namespaces are java packages
; namespaces can only appear once, and must at the first effective line of the file
; (lines containing only comments or defines or undefs are not effective lines)
; NOTE THAT scripts cannot have package declaration

; if there's no declaration of the namespace, the namespace would be ""

; then, there can be import commands
import java::awt::_               ; import all types from java::awt
import java::util::List           ; import java::util::List
import java::util::Collections._  ; import all static fields and methods from java::util::Collections
; there can be 0 or 1 or more imports
; and "import" can appear in any position in the root of the code part

; Latte allows class and interface definition
; if the file is *.lts, the rest part can be type definitions, statements or expressions
; you can see "statements.lts" for more details
; if the file is *.lt, the rest part in root of code can only hold type definitions
; you can see "typeDef.lt" for more details
class I_Am_A_Class
    ; Class Constructing Block
    ; you can define variables and methods
    i_am_field : int          ; defines a variable
    ; varialbes in class constructing blocks are considered as Fields in java
    list : List               ; another field
    ; the import checks full name first
    ; so, List matches java::util::List instead of java::awt::List

    i_am_a_method():List      ; defines a method
        ; method block
        ; variables in method block are local variables
        list=emptyList()      ; invoke java::util::Collections.emptyList()
        ; and assign to field `list`
        return list

interface I_Am_An_Interface

; use define to simulate SQL
CREATE TABLE User (
    id NUMBER,
    name VARCHAR
)
; it's the same as
; class User(
;     id : int
;     name : String
; )

undef "CREATE TABLE"
undef "NUMBER"
undef "VARCHAR"

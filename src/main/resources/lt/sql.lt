/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 KuiGang Wang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
This is a package that uses DSL to write SQLs. The SQLs can be executed directly
*/
package lt::sql

import java::sql::_

interface SQLBuilder
    buildSQL():String

; class that represents the database.
data class DB(url:String, user:String, pwd:String)
    conn:Connection

    ; connect to the db
    ; fill in a Connection object as the inside connection
    ; if the conn is null, then the connection will be retrieved via
    ; DriverManager#getConnection(url, user, pwd)
    connect(conn:Connection=null):DB
        if conn
            this.conn=conn
        else
            conn = DriverManager.getConnection(url, user, pwd)
        return this

    execUpdate(sql:String):int
    execQuery(sql:String):ResultSet
    execUpdate(builder:SQLBuilder)=execUpdate(builder.buildSQL)
    execQuery(builder:SQLBuilder)=execQuery(builder.buildSQL)

    createStatement():Context = Context()

    close():Unit
        if conn
            conn.close()

; represents a Column.
; tbl_o is filled with Entity object and name is filled with the column's name
data class Column(tbl_o, name:String)
    tbl = tbl_o.getClass.simpleName

    gt(o):Condition=Condition(">", this, [o])
    lt(o):Condition=Condition("<", this, [o])
    ge(o):Condition=Condition(">=", this, [o])
    le(o):Condition=Condition("<=", this, [o])
    equal(o):Condition=Condition("==", this, [o])
    notEqual(o):Condition=Condition("<>", this, [o])
    between(a,b):Condition=Condition("between", this, [a,b])
    `in`(agg):Condition=Condition("in", this, [agg])

    assign(o):Assign=Assign(this, o)

    desc():Order=Order(this, false)
    asc():Order=Order(this, true)

    toString():String
        return "`"+tbl+"`.`"+name+"`"

; assign to the column
data class Assign(col:Column, o)
    toString(context:Context):String = col+" = "+context.putValue(o)

; represents a Condition
data class Condition(op:String, col:Column, ls:List)
    toString(context:Context):String
        sb = StringBuilder()
        sb append col append " " append op append " "
        if ls
            isFirst=true
            for o in ls
                if isFirst
                    isFirst=false
                else
                    sb append ", "
                sb append context.putValue(o)
        return sb.toString

data class Order(col:Column, isAsc:bool)
    toString():String = col + " " + (
        if isAsc
            return "asc"
        else
            return "desc"
    )

data class Context(
    argMap:Map = {}                           ; the map of position => arguments
    count:int = 0                             ; count
)
    putValue(o):String
        if o is type EndStatement
            return objectToString(o)
        else
            argMap[++count]=o
            return "?"+count
    objectToString(o):String
        if o is type EndStatement
            return "(" + o.buildSQL + ")"
        else
            return "`" + o.getClass.simpleName + "`"

    select(col:Column):Select = select([col])
    select(cols:List):Select
        sb:StringBuilder = StringBuilder()
        sb append "select "
        return Select(this, sb, cols)
    insert_into(tbl_o):Insert
        sb:StringBuilder = StringBuilder()
        sb append "insert into "
        return Insert(this, sb, tbl_o)
    update(tbl_o):Update
        sb:StringBuilder = StringBuilder()
        sb append "update "
        return Update(this, sb, tbl_o)
    delete_from(tbl_o):UpdateWhere
        sb:StringBuilder = StringBuilder()
        sb append "delete from " append objectToString(tbl_o) append " where "
        return UpdateWhere(this, sb)

data class Select(context:Context, sb:StringBuilder, cols:List)
    sb append cols.join(", ")

    from(tbl_o):From
        return from([tbl_o])
    from(tbl_os:List):From
        sb append " from "
        return From(context, sb, tbl_os)

abstract class EndStatement(context:Context, sb:StringBuilder):SQLBuilder
    orderBy(order:Order):EndStatement
        return orderBy([order])
    orderBy(orders:List):EndStatement
        sb append " order by " append orders.join(", ")
        return this

    groupBy(col:Column):EndStatement
        return groupBy([col])
    groupBy(cols:List):EndStatement
        sb append " group by " append cols.join(", ")
        return this

    limit(length:int):EndStatement
        sb append " limit " append context.putValue(length)
        return this
    limit(start:int, length:int):EndStatement
        sb append " limit " append context.putValue(start) append "," append context.putValue(length)
        return this

    buildSQL():String = sb.toString
    execQuery():ResultSet=...

class From(context:Context, sb:StringBuilder, tbls:List):EndStatement(context, sb)
    isFirst=true
    for tbl in tbls
        if isFirst
            isFirst=false
        else
            sb append ", "
        sb append context.objectToString(tbl)

    join(tbl_o):Join
        sb append " join "
        return Join(context, sb, tbl_o, this)

    where(con:Condition):QueryWhere
        sb append " where "
        return QueryWhere(context, sb, con)

class Join(context:Context, sb:StringBuilder, tbl_o, from:From)
    sb append context.objectToString(tbl_o)

    on(con:Condition):From
        sb append " on " append con.toString(context)
        return from

class QueryWhere(context:Context, sb:StringBuilder, con:Condition):EndStatement(context, sb)
    sb append con.toString(context)

class Insert(context:Context, sb:StringBuilder, tbl_o):SQLBuilder
    sb append context.objectToString(tbl_o)

    _(col:Column) = _([col])
    _(cols:List)
        sb append " (" append cols.join(", ") append ")"
        return this
    values(o) = values([o])
    values(values:List)
        sb append " values ("
        isFirst=true
        for value in values
            if isFirst
                isFirst = false
            else
                sb append ", "
            sb append context.putValue(value)
        sb append ")"
        return this
    toString():String = buildSQL()
    buildSQL():String = sb.toString

class Update(context:Context, sb:StringBuilder, tbl_o)
    sb append context.objectToString(tbl_o)

    set(assign:Assign)=set([assign])
    set(assigns:List):UpdateWhere
        sb append " set "
        isFirst=true
        for assign in assigns
            if isFirst
                isFirst=false
            else
                sb append ", "
            sb append assign.toString(context)
        sb append " where "
        return UpdateWhere(context, sb)

class UpdateWhere(context:Context, sb:StringBuilder):SQLBuilder
    where(con:Condition)
        sb append con.toString(context)
        return this
    buildSQL():String =  sb.toString

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 KuiGang Wang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
This is a package used to generate HTML text.
e.g.

    Html() + [
        Head()
        Body() + [
            Form() + [
                Input(typ='text', value='hello world')
                Input(typ='submmit', value='ok')
            ]
        ]
    ]

invoke toString method, the result would be

    <html><head></head><body><form><input type='text' value='hello world'><input type='submit' value='ok'></form></body></html>

*/
package lt::dsl::html

import lt::util::_

private class StringEscaper
    static
        val htmlEscapeMap = {
            '<' : "&lt;"
            '>' : "&gt;"
            '&' : "&amp;"
            '"' : "&quot;"
            ' ' : "&nbsp;"
        }.immutable
        val attrEscapeMap = {
            '"' : "&quot;"
        }.immutable
        escapeHtml(source:String):String
            sb = StringBuilder()
            arr:[]char = source.toCharArray()
            for i in 0.:arr.length
                c:char = arr[i]
                res = htmlEscapeMap[c]
                if res
                    sb append res
                else
                    sb append c
            return sb.toString()
        escapeAttr(attr:String):String
            sb = StringBuilder()
            arr:[]char = attr.toCharArray()
            for i in 0.:arr.length
                c:char = arr[i]
                res = attrEscapeMap[c]
                if res
                    sb append res
                else
                    sb append c
            return sb.toString()

/*
The base of all DOM. the DOM provides 4 attributes : id, name, class, and style.
The toString({}) method returns <simple-name-lower-case attr='value'>.
It doesn't contain the closing tag
Use class HTMLElementWithClosing if the closing tag is required
*/
abstract data class HTMLElement(cls)
    attrMap={}
    set(attrName:String, o):HTMLElement
        attrMap[attrName] = o
        return this
    attr(attrName:String, o):HTMLElement
        return set(attrName, o)

    toString(attrs):String
        sb = StringBuilder()
        sb append "<" append this.getClass.getSimpleName

        for entry in attrMap
            sb append " " append entry.key append "=\"" append StringEscaper.escapeAttr(entry.value) append "\""
        if cls
            sb append " class=\"" append StringEscaper.escapeAttr(cls) append "\""

        for entry in attrs
            if entry.value
                sb append " " append entry.key append "=\"" append StringEscaper.escapeAttr(entry.value) append "\""

        sb append ">"

        return sb toString

/*
The base of all DOM that should have a closing tag
*/
abstract data class HTMLElementWithClosing : HTMLElement
    children : List

    add(children:List)
        this.children=children
        return this

    toString(attrs):String
        sb=StringBuilder()
        sb append HTMLElement.this.toString(attrs)

        if children
            for i in children
                if i is type String
                    sb append StringEscaper.escapeHtml(i)
                else
                    sb append i

        sb append "</" append this.getClass.getSimpleName.toLowerCase append ">"
        return sb toString

/*
simply use the string as HTML without escaping.
*/
data class Plain(text:String) : HTMLElement
    toString():String=text

; <html>...</html>
data class html : HTMLElementWithClosing
    toString():String = toString({})

; <head>...</head>
data class head : HTMLElementWithClosing
    toString():String = toString({})

; <meta http-equiv='' scheme=''>
data class meta(http_equiv) : HTMLElement
    toString():String = toString({'http-equiv':http_equiv})

; <script src='' type=''>...</script>
data class script(typ) : HTMLElementWithClosing
    toString():String = toString({'type':typ})

; <link rel='' type='' href=''>
data class link(typ) : HTMLElement
    toString():String = toString({'type':typ})

; <body>...</body>
data class body : HTMLElementWithClosing
    toString():String = toString({})

; <a href=''>...</a>
data class a : HTMLElementWithClosing
    toString():String = toString({})

; <br>
data class br : HTMLElement
    toString():String = toString({})

; <button type=''>...</button>
data class button(typ) : HTMLElementWithClosing
    toString():String = toString({'type':typ})

; <code>...</code>
data class code : HTMLElementWithClosing
    toString():String = toString({})

; <div>...</div>
data class div : HTMLElementWithClosing
    toString():String = toString({})

; <h1>...</h1>
data class h1 : HTMLElementWithClosing
    toString():String = toString({})

; <h2>...</h2>
data class h2 : HTMLElementWithClosing
    toString():String = toString({})

; <h3>...</h3>
data class h3 : HTMLElementWithClosing
    toString():String = toString({})

; <h4>...</h4>
data class h4 : HTMLElementWithClosing
    toString():String = toString({})

; <h5>...</h5>
data class h5 : HTMLElementWithClosing
    toString():String = toString({})

; <h6>...</h6>
data class h6 : HTMLElementWithClosing
    toString():String = toString({})

; <hr>
data class hr : HTMLElementWithClosing
    toString():String = toString({})

; <iframe src=''>...</iframe>
data class iframe : HTMLElementWithClosing
    toString():String = toString({})

; <img src=''>...</img>
data class img : HTMLElementWithClosing
    toString():String = toString({})

; <label>...</label>
data class label : HTMLElementWithClosing
    toString():String = toString({})

; <form action='' method=''></form>
data class form : HTMLElementWithClosing
    toString():String = toString({})

data class i : HTMLElementWithClosing
    toString():String = toString({})

; <input type='' value=''>
data class input(typ) : HTMLElement
    toString():String = toString({"type" : typ})

; <textarea>...</textarea>
data class textarea : HTMLElementWithClosing
    toString():String = toString({})

; <select>...</select>
data class select : HTMLElementWithClosing
    toString():String = toString({})

data class span : HTMLElementWithClosing
    toString():String = toString({})

; <option value=''>...</option>
data class option : HTMLElementWithClosing
    toString():String = toString({})

; <nav>...</nav>
data class nav : HTMLElementWithClosing
    toString():String = toString({})

; <ol>...</ol>
data class ol : HTMLElementWithClosing
    toString():String = toString({})

; <ul>...</ul>
data class ul : HTMLElementWithClosing
    toString():String = toString({})

; <li>...</li>
data class li : HTMLElementWithClosing
    toString():String = toString({})

; <p>...</p>
data class p : HTMLElementWithClosing
    toString():String = toString({})

; <pre>...</pre>
data class pre : HTMLElementWithClosing
    toString():String = toString({})

; <table>...</table>
data class table : HTMLElementWithClosing
    toString():String = toString({})

; <thead>...</thead>
data class thead : HTMLElementWithClosing
    toString():String = toString({})

; <tbody>...</tbody>
data class tbody : HTMLElementWithClosing
    toString():String = toString({})

; <tfoot>...</tfoot>
data class tfoot : HTMLElementWithClosing
    toString():String = toString({})

data class title : HTMLElementWithClosing
    toString():String = toString({})

; <tr>...</tr>
data class tr : HTMLElementWithClosing
    toString():String = toString({})

; <td>...</td>
data class td : HTMLElementWithClosing
    toString():String = toString({})

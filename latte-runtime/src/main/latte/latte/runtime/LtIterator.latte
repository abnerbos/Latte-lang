/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 KuiGang Wang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package lt::runtime

import java::lang::reflect::Array
import java::util::Enumeration
import java::util::Iterator
import java::util::Map

/**
 * iterable
 */
abstract class LtIterator : Iterator
    abstract hasNext():bool
    abstract next()
    @Override
    def remove():Unit
        throw UnsupportedOperationException()

    static
        def getIterator(o):LtIterator = o match
            _ if o.getClass.isArray =>
                if o.getClass.getComponentType.isPrimitive
                    PrimitiveArrayIt(o)
                else { ArrayIt(o) }
            _:Iterable => It(o.iterator())
            _:Iterator => It(o)
            _:Enumeration => EnIt(o)
            _:Map => It(o.entrySet().iterator())
            _ => throw RuntimeException("cannot iterate on " + o)

internal class PrimitiveArrayIt(array) : LtIterator
    val len:int = Array.getLength(array)
    val index:int = 0

    @Override
    def hasNext():bool = index < len
    @Override
    def next() = Array.get(array, index++)

internal class ArrayIt(array:[]Object) : LtIterator
    index:int = 0

    @Override
    def hasNext():bool = index < array.length
    @Override
    def next() = array[index++]

internal class It(it:Iterator) : LtIterator
    @Override
    def hasNext():bool = it.hasNext()
    @Override
    def next() = it.next()

internal class EnIt(en:Enumeration) : LtIterator
    @Override
    def hasNext():bool = en.hasMoreElements()
    @Override
    def next() = en.nextElement()

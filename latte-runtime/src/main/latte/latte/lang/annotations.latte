/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 KuiGang Wang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package lt::lang

import java::lang::annotation::ElementType
import java::lang::annotation::Target

/**
 * mark the type as <tt>FunctionalAbstractClass</tt>.
 * a <tt>functional abstract class</tt> has exactly one abstract method,
 * and must have a public constructor with no parameters<br>
 * <pre>
 * ; C1 is a functional abstract class
 * class C1
 *     abs method()=...
 *
 * ; C2 is not a functional abstract class, because it doesn't have public zero-parameter constructor
 * class C2(param)
 *     abs method()=...
 *
 * ; C3 is not a functional abstract class, because it has more than one unimplemented method
 * class C3:java::util::List
 * </pre>
 */
@Target(ElementType.TYPE)
annotation FunctionalAbstractClass

/**
 * functional interface<br>
 * same meaning as jdk 1.8 FunctionalInterface
 */
@Target(ElementType.TYPE)
annotation FunctionalInterface

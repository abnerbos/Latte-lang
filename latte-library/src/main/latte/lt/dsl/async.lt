/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 KuiGang Wang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package lt::async

class Async
    /*
    waterfall accepts a list of functions, these functions should have two params.
    the first param of the function is result from previous function (or null if it's the first function)
    the second param of the function is the next function to be invoked, e.g.

        Async().waterfall([
            (res, next)->
                ...
                next(something)
            (res, next)->
                ...
                next(something)
        ], (err, res)->
            if err
                ...
            else
                ...
        )

    when an exception occurred, it automatically goes to the final callback function
    and apply the exception as the first argument, null as the second argument
    */
    waterfall(functions, callback):Unit
        var next = (res)-> callback(null, res)
        for i in (functions.length-1)..0
            var f = functions[i]
            next = WaterfallFunNext(f, next, callback)
        next(null)

class WaterfallFunNext(f, next, callback)
    apply(res)
        try
            f(res, next)
        catch e
            callback(e, null)
